{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","const numberButtons = document.querySelectorAll('[data-number]');\nconst operationButtons = document.querySelectorAll('[data-operation]');\nconst equalsButton = document.querySelector('[data-equals]');\nconst deleteButton = document.querySelector('[data-delete]');\nconst allClearButton = document.querySelector('[data-all-clear]');\nconst previousOperandTextElement = document.querySelector(\n  '[data-previous-operand]'\n);\nconst currentOperandTextElement = document.querySelector(\n  '[data-current-operand]'\n);\nclass Calculator {\n  constructor(previousOperandTextElement, currentOperandTextElement) {\n    this.previousOperandTextElement = previousOperandTextElement;\n    this.currentOperandTextElement = currentOperandTextElement;\n    this.clear();\n  }\n  clear() {\n    this.currentOperand = '';\n    this.previousOperand = '';\n    this.operation = undefined;\n  }\n\n  delete() {\n    this.currentOperand = this.currentOperand\n    .toString()\n    .slice(0, -1)\n  }\n\n  appendNumber(number) {\n    if (number === '.' && this.currentOperand.includes('.')) \n    \n    return;\n\n    this.currentOperand = this.currentOperand.toString() + number.toString();\n  }\n\n  chooseOperation(operation) {\n    if (this.currentOperand === '') \n    \n    return;\n\n    if (this.previousOperand !== '') {\n      this.compute();\n    }\n    this.operation = operation;\n    this.previousOperand = this.currentOperand;\n    this.currentOperand = '';\n  }\n\n  compute() {\n    let computation;\n    const prev = parseFloat(this.previousOperand);\n    const current = parseFloat(this.currentOperand);\n\n    if (isNaN(prev) || isNaN(current)) \n    \n    return;\n\n    switch (this.operation) {\n      case '+':\n        computation = prev + current;\n        break;\n\n      case '-':\n        computation = prev - current;\n        break;\n\n      case '*':\n        computation = prev * current;\n        break;\n\n      case 'รท':\n        computation = prev / current;\n        break;\n\n      default:\n        return;\n    }\n    this.currentOperand = computation\n    this.operation = undefined\n    this.previousOperand = ''\n  }\n\n  getDisplayNumber(number) {\n    const stringNumber = number.toString()\n    const integerDigits = parseFloat(stringNumber.split('.')[0])\n    const decimalDigits = stringNumber.split('.')[1]\n    let integerDisplay\n    if (isNaN(integerDigits)) {\n        integerDisplay = ''\n    } else {\n        integerDisplay = integerDigits.toLocaleString('en', {maximumFractionDigits: 0})\n    }\n    if (decimalDigits != null) {\n\n        return `${integerDisplay}.${decimalDigits}`\n    } else {\n        \n        return integerDisplay\n    }\n  }\n\n  updateDisplay() {\n    this.currentOperandTextElement.innerText = \n    this.getDisplayNumber(this.currentOperand);\n\n    if (this.operation != null) {\n        this.previousOperandTextElement.innerText = \n        `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`  \n    } else {\n        this.previousOperandTextElement.innerText = ''\n    }\n    \n  }\n}\n\nconst calculator = new Calculator(\n  previousOperandTextElement,\n  currentOperandTextElement\n);\n\nnumberButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.appendNumber(button.innerText);\n    calculator.updateDisplay();\n  });\n});\n\noperationButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.chooseOperation(button.innerText);\n    calculator.updateDisplay();\n  });\n});\n\nequalsButton.addEventListener('click', button => {\n  calculator.compute();\n  calculator.updateDisplay();\n});\n\nallClearButton.addEventListener('click', button => {\n    calculator.clear();\n    calculator.updateDisplay();\n  });\n\n  deleteButton.addEventListener('click', button => {\n    calculator.delete();\n    calculator.updateDisplay();\n  });  \n"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$b8f9b7833fa37166$var$numberButtons","document","querySelectorAll","$b8f9b7833fa37166$var$operationButtons","$b8f9b7833fa37166$var$equalsButton","querySelector","$b8f9b7833fa37166$var$deleteButton","$b8f9b7833fa37166$var$allClearButton","$b8f9b7833fa37166$var$previousOperandTextElement","$b8f9b7833fa37166$var$currentOperandTextElement","$b8f9b7833fa37166$var$calculator","Calculator","previousOperandTextElement1","currentOperandTextElement1","this","previousOperandTextElement","currentOperandTextElement","clear","currentOperand","previousOperand","operation","undefined","toString","slice","number","includes","compute","computation","prev","parseFloat","current","isNaN","integerDisplay","stringNumber","integerDigits","split","decimalDigits","toLocaleString","maximumFractionDigits","concat","innerText","getDisplayNumber","forEach","button","addEventListener","appendNumber","updateDisplay","chooseOperation","delete"],"version":3,"file":"index.3302db8b.js.map"}