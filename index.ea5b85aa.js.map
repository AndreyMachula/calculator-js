{"mappings":"AAAA,MAAMA,EAAgBC,SAASC,iBAAiB,iBAC1CC,EAAmBF,SAASC,iBAAiB,oBAC7CE,EAAeH,SAASI,cAAc,iBACtCC,EAAeL,SAASI,cAAc,iBACtCE,EAAiBN,SAASI,cAAc,oBACxCG,EAA6BP,SAASI,cAC1C,2BAEII,EAA4BR,SAASI,cACzC,0BA4GF,MAAMK,EAAa,IA1GnB,MAMEC,QACEC,KAAKC,eAAiB,GACtBD,KAAKE,gBAAkB,GACvBF,KAAKG,eAAYC,EAGnBC,SACEL,KAAKC,eAAiBD,KAAKC,eAC1BK,WACAC,MAAM,GAAG,GAGZC,aAAaC,GACI,MAAXA,GAAkBT,KAAKC,eAAeS,SAAS,OAInDV,KAAKC,eAAiBD,KAAKC,eAAeK,WAAaG,EAAOH,YAGhEK,gBAAgBR,GACc,KAAxBH,KAAKC,iBAIoB,KAAzBD,KAAKE,iBACPF,KAAKY,UAEPZ,KAAKG,UAAYA,EACjBH,KAAKE,gBAAkBF,KAAKC,eAC5BD,KAAKC,eAAiB,IAGxBW,UACE,IAAIC,EACJ,MAAMC,EAAOC,WAAWf,KAAKE,iBACvBc,EAAUD,WAAWf,KAAKC,gBAEhC,IAAIgB,MAAMH,KAASG,MAAMD,GAAzB,CAIA,OAAQhB,KAAKG,WACX,IAAK,IACHU,EAAcC,EAAOE,EACrB,MAEF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MAEF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MAEF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MAEF,QACE,OAEJhB,KAAKC,eAAiBY,EACtBb,KAAKG,eAAYC,EACjBJ,KAAKE,gBAAkB,IAGzBgB,iBAAiBT,GACf,MAAMU,EAAeV,EAAOH,WACtBc,EAAgBL,WAAWI,EAAaE,MAAM,KAAK,IACnDC,EAAgBH,EAAaE,MAAM,KAAK,GAC9C,IAAIE,EAMJ,OAJIA,EADAN,MAAMG,GACW,GAEAA,EAAcI,eAAe,KAAM,CAACC,sBAAuB,IAE3D,MAAjBH,EAEO,GAAGC,KAAkBD,IAGrBC,EAIbG,gBACE1B,KAAK2B,0BAA0BC,UAC/B5B,KAAKkB,iBAAiBlB,KAAKC,gBAEL,MAAlBD,KAAKG,UACLH,KAAK6B,2BAA2BD,UAChC,GAAG5B,KAAKkB,iBAAiBlB,KAAKE,oBAAoBF,KAAKG,YAEvDH,KAAK6B,2BAA2BD,UAAY,GAnGlDE,YAAYC,EAA4BC,GACtChC,KAAK6B,2BAA6BE,EAClC/B,KAAK2B,0BAA4BK,EACjChC,KAAKD,UAuGPH,EACAC,GAGFT,EAAc6C,SAAQC,IACpBA,EAAOC,iBAAiB,SAAS,KAC/BrC,EAAWU,aAAa0B,EAAON,WAC/B9B,EAAW4B,sBAIfnC,EAAiB0C,SAAQC,IACvBA,EAAOC,iBAAiB,SAAS,KAC/BrC,EAAWa,gBAAgBuB,EAAON,WAClC9B,EAAW4B,sBAIflC,EAAa2C,iBAAiB,SAASD,IACrCpC,EAAWc,UACXd,EAAW4B,mBAGb/B,EAAewC,iBAAiB,SAASD,IACrCpC,EAAWC,QACXD,EAAW4B,mBAGbhC,EAAayC,iBAAiB,SAASD,IACrCpC,EAAWO,SACXP,EAAW4B","sources":["src/index.js"],"sourcesContent":["const numberButtons = document.querySelectorAll('[data-number]');\nconst operationButtons = document.querySelectorAll('[data-operation]');\nconst equalsButton = document.querySelector('[data-equals]');\nconst deleteButton = document.querySelector('[data-delete]');\nconst allClearButton = document.querySelector('[data-all-clear]');\nconst previousOperandTextElement = document.querySelector(\n  '[data-previous-operand]'\n);\nconst currentOperandTextElement = document.querySelector(\n  '[data-current-operand]'\n);\nclass Calculator {\n  constructor(previousOperandTextElement, currentOperandTextElement) {\n    this.previousOperandTextElement = previousOperandTextElement;\n    this.currentOperandTextElement = currentOperandTextElement;\n    this.clear();\n  }\n  clear() {\n    this.currentOperand = '';\n    this.previousOperand = '';\n    this.operation = undefined;\n  }\n\n  delete() {\n    this.currentOperand = this.currentOperand\n    .toString()\n    .slice(0, -1)\n  }\n\n  appendNumber(number) {\n    if (number === '.' && this.currentOperand.includes('.')) \n    \n    return;\n\n    this.currentOperand = this.currentOperand.toString() + number.toString();\n  }\n\n  chooseOperation(operation) {\n    if (this.currentOperand === '') \n    \n    return;\n\n    if (this.previousOperand !== '') {\n      this.compute();\n    }\n    this.operation = operation;\n    this.previousOperand = this.currentOperand;\n    this.currentOperand = '';\n  }\n\n  compute() {\n    let computation;\n    const prev = parseFloat(this.previousOperand);\n    const current = parseFloat(this.currentOperand);\n\n    if (isNaN(prev) || isNaN(current)) \n    \n    return;\n\n    switch (this.operation) {\n      case '+':\n        computation = prev + current;\n        break;\n\n      case '-':\n        computation = prev - current;\n        break;\n\n      case '*':\n        computation = prev * current;\n        break;\n\n      case 'รท':\n        computation = prev / current;\n        break;\n\n      default:\n        return;\n    }\n    this.currentOperand = computation\n    this.operation = undefined\n    this.previousOperand = ''\n  }\n\n  getDisplayNumber(number) {\n    const stringNumber = number.toString()\n    const integerDigits = parseFloat(stringNumber.split('.')[0])\n    const decimalDigits = stringNumber.split('.')[1]\n    let integerDisplay\n    if (isNaN(integerDigits)) {\n        integerDisplay = ''\n    } else {\n        integerDisplay = integerDigits.toLocaleString('en', {maximumFractionDigits: 0})\n    }\n    if (decimalDigits != null) {\n\n        return `${integerDisplay}.${decimalDigits}`\n    } else {\n        \n        return integerDisplay\n    }\n  }\n\n  updateDisplay() {\n    this.currentOperandTextElement.innerText = \n    this.getDisplayNumber(this.currentOperand);\n\n    if (this.operation != null) {\n        this.previousOperandTextElement.innerText = \n        `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`  \n    } else {\n        this.previousOperandTextElement.innerText = ''\n    }\n    \n  }\n}\n\nconst calculator = new Calculator(\n  previousOperandTextElement,\n  currentOperandTextElement\n);\n\nnumberButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.appendNumber(button.innerText);\n    calculator.updateDisplay();\n  });\n});\n\noperationButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    calculator.chooseOperation(button.innerText);\n    calculator.updateDisplay();\n  });\n});\n\nequalsButton.addEventListener('click', button => {\n  calculator.compute();\n  calculator.updateDisplay();\n});\n\nallClearButton.addEventListener('click', button => {\n    calculator.clear();\n    calculator.updateDisplay();\n  });\n\n  deleteButton.addEventListener('click', button => {\n    calculator.delete();\n    calculator.updateDisplay();\n  });  \n"],"names":["$1f0dc3b9307be026$var$numberButtons","document","querySelectorAll","$1f0dc3b9307be026$var$operationButtons","$1f0dc3b9307be026$var$equalsButton","querySelector","$1f0dc3b9307be026$var$deleteButton","$1f0dc3b9307be026$var$allClearButton","$1f0dc3b9307be026$var$previousOperandTextElement","$1f0dc3b9307be026$var$currentOperandTextElement","$1f0dc3b9307be026$var$calculator","clear","this","currentOperand","previousOperand","operation","undefined","delete","toString","slice","appendNumber","number","includes","chooseOperation","compute","computation","prev","parseFloat","current","isNaN","getDisplayNumber","stringNumber","integerDigits","split","decimalDigits","integerDisplay","toLocaleString","maximumFractionDigits","updateDisplay","currentOperandTextElement","innerText","previousOperandTextElement","constructor","previousOperandTextElement1","currentOperandTextElement1","forEach","button","addEventListener"],"version":3,"file":"index.ea5b85aa.js.map"}